systemd:
  units:
    - name: etcd-member.service
      dropins:
        - name: etcd_envvars.conf
          contents: |
            [Unit]
            Requires=coreos-metadata.service
            After=coreos-metadata.service
            [Service]
            EnvironmentFile=/root/cluster_data.txt
    - name: etcd_bootstrap.service
      enabled: true
      contents: |
        [Unit]
        Description="Run script to gather facts for etcd cluster bootstrapping"
        Requires=network-online.target
        After=network.target network-online.target networkcheck.service
        Before=etcd-member.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh /root/etcd_bootstrap.sh

        [Install]
        WantedBy=multi-user.target
    - name: networkcheck.service
      enabled: true
      contents: |
        [Unit]
        Requires=network-online.target
        After=network.target network-online.target
        Before=etcd_bootstrap.service

        [Service]
        Type=oneshot
        ExecStart=/bin/sh /root/networkcheck.sh

        [Install]
        WantedBy=multi-user.target
    - name: etcd2.service
      enabled: false
storage:
  files:
    - path: /root/etcd_bootstrap.sh
      filesystem: root
      contents:
        inline: |
          ec2_instance_id=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id)

          ec2_instance_ip=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/local-ipv4)

          ec2_instance_region=$(/usr/bin/curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | /usr/bin/grep region | /usr/bin/awk -F\" '{print $4}')

          /usr/bin/echo ETCD_NAME=$ec2_instance_id > /root/cluster_data.txt

          /usr/bin/echo EC2_IP=$ec2_instance_ip >> /root/cluster_data.txt

          asg_name=$(docker run -e "AWS_DEFAULT_REGION=$ec2_instance_region" cgswong/aws:latest aws autoscaling describe-auto-scaling-instances --instance-ids=$ec2_instance_id | jq -r .[][0].AutoScalingGroupName)

          /usr/bin/echo EC2_ASG_NAME=$asg_name >> /root/cluster_data.txt

          etcd_peer_urls=$(docker run -e "AWS_DEFAULT_REGION=$ec2_instance_region" cgswong/aws:latest aws ec2 describe-instances --instance-ids $(docker run -e "AWS_DEFAULT_REGION=$ec2_instance_region" cgswong/aws:latest aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $asg_name | jq .AutoScalingGroups[0].Instances[].InstanceId | xargs) | jq -r '.Reservations[].Instances | map(.InstanceId + "=http://" + .NetworkInterfaces[].PrivateIpAddress + ":2380")[]' | xargs | sed 's/  */,/g')

          /usr/bin/echo ETCD_INITIAL_CLUSTER=$etcd_peer_urls >> /root/cluster_data.txt

          /usr/bin/echo ETCD_INITIAL_CLUSTER_STATE=new >> /root/cluster_data.txt
      mode: 0755
    - path: /root/networkcheck.sh
      filesystem: root
      contents:
        inline: |
          SERVER="google.com"
          retcode=1
          while [ $retcode != 0 ]; do
            ping -c 1 $SERVER >/dev/null 2>&1
            retcode=$?
          done
          exit 0
      mode: 0755
etcd:
  version: "3.2.11"
  advertise_client_urls:       "http://{PRIVATE_IPV4}:2379"
  initial_advertise_peer_urls: "http://{PRIVATE_IPV4}:2380"
  listen_client_urls:          "http://0.0.0.0:2379"
  listen_peer_urls:            "http://{PRIVATE_IPV4}:2380"
locksmith:
  reboot_strategy: "etcd-lock"
